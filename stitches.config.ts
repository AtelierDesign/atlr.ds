import { createStitches, defaultThemeMap } from '@stitches/react';
import {
    amber,
    amberA,
    amberDark,
    amberDarkA,
    blackA,
    blue,
    blueA,
    blueDark,
    blueDarkA,
    bronze,
    bronzeA,
    bronzeDark,
    bronzeDarkA,
    brown,
    brownA,
    brownDark,
    brownDarkA,
    crimson,
    crimsonA,
    crimsonDark,
    crimsonDarkA,
    cyan,
    cyanA,
    cyanDark,
    cyanDarkA,
    gold,
    goldA,
    goldDark,
    goldDarkA,
    grass,
    grassA,
    grassDark,
    grassDarkA,
    gray,
    grayA,
    grayDark,
    grayDarkA,
    green,
    greenA,
    greenDark,
    greenDarkA,
    indigo,
    indigoA,
    indigoDark,
    indigoDarkA,
    lime,
    limeA,
    limeDark,
    limeDarkA,
    mauve,
    mauveA,
    mauveDark,
    mauveDarkA,
    mint,
    mintA,
    mintDark,
    mintDarkA,
    olive,
    oliveA,
    oliveDark,
    oliveDarkA,
    orange,
    orangeA,
    orangeDark,
    orangeDarkA,
    pink,
    pinkA,
    pinkDark,
    pinkDarkA,
    plum,
    plumA,
    plumDark,
    plumDarkA,
    purple,
    purpleA,
    purpleDark,
    purpleDarkA,
    red,
    redA,
    redDark,
    redDarkA,
    sage,
    sageA,
    sageDark,
    sageDarkA,
    sand,
    sandA,
    sandDark,
    sandDarkA,
    sky,
    skyA,
    skyDark,
    skyDarkA,
    slate,
    slateA,
    slateDark,
    slateDarkA,
    teal,
    tealA,
    tealDark,
    tealDarkA,
    tomato,
    tomatoA,
    tomatoDark,
    tomatoDarkA,
    violet,
    violetA,
    violetDark,
    violetDarkA,
    whiteA,
    yellow,
    yellowA,
    yellowDark,
    yellowDarkA,
} from '@radix-ui/colors';
import type * as Stitches from '@stitches/react';
export type { VariantProps } from '@stitches/react';
export const { styled, css, theme, createTheme, getCssText, globalCss, keyframes, config, reset } = createStitches({
    themeMap: {
        ...defaultThemeMap,
    },
    prefix: 'atelier',
    theme: {
        colors: {
            ...gray,
            ...mauve,
            ...slate,
            ...sage,
            ...olive,
            ...sand,
            ...tomato,
            ...red,
            ...crimson,
            ...pink,
            ...plum,
            ...purple,
            ...violet,
            ...indigo,
            ...blue,
            ...sky,
            ...mint,
            ...cyan,
            ...teal,
            ...green,
            ...grass,
            ...lime,
            ...yellow,
            ...amber,
            ...orange,
            ...brown,
            ...bronze,
            ...gold,

            ...grayA,
            ...mauveA,
            ...slateA,
            ...sageA,
            ...oliveA,
            ...sandA,
            ...tomatoA,
            ...redA,
            ...crimsonA,
            ...pinkA,
            ...plumA,
            ...purpleA,
            ...violetA,
            ...indigoA,
            ...blueA,
            ...skyA,
            ...mintA,
            ...cyanA,
            ...tealA,
            ...greenA,
            ...grassA,
            ...limeA,
            ...yellowA,
            ...amberA,
            ...orangeA,
            ...brownA,
            ...bronzeA,
            ...goldA,

            ...whiteA,
            ...blackA,

            /*
             * atelier.color...
             */

            air1: 'hsl(220, 20%, 97%)',
            air2: 'hsl(207, 22%, 90%)',
            air3: 'hsl(207, 24%, 84%)',
            air4: 'hsl(206, 24%, 77%)',
            air5: 'hsl(204, 25%, 70%)',
            air6: 'hsl(202, 27%, 57%)',
            air7: 'hsl(322, 39%, 20%)',

            airA5: 'hsla(204, 25%, 70%, 0.142)',
            airA6: 'hsla(202, 27%, 57%, 0.220)',
            airA7: 'hsla(322, 39%, 20%, 0.818)',


            white: 'hsl(0, 0%, 100%)',
            crimson: '#d64045',
            air: '#477194',
            maximumBlue: '#5e7ce2',
            volt: '#7cff5c',
            crayola: '#ED254E',
            pinky: '#ff206e',
            blueblue: '#0151f5',
            pinkyA: 'hsla(339, 100%, 56%, 0.6)',

            suprLime1: 'hsl(109, 85%, 97%)',
            suprLime2: 'hsl(108, 90%, 88%)',
            suprLime3: 'hsl(110, 91%, 83%)',
            suprLime4: 'hsl(111, 91%, 78%)',
            suprLime5: 'hsl(113, 91%, 73%)',
            suprLime6: 'hsl(114, 91%, 68%)',
            suprLime7: 'hsl(164, 79%, 6%)',

            atelier00: '#CEFE71',
            atelier01: '#BEBCA6',
            atelier02: '#A493F8',
            atelier03: '#837E95',

            blur: 'rgba(240,240,240,0.8)',

            light100: 'rgba(240, 240, 240, 0.7)',
            light50: 'rgba(240, 240, 240, 0.8)',

            // semantic safe colours ...
            hiContrast: '$slate12',
            loContrast: '$slate1',
            canvas: 'hsl(0 0% 93%)',
            panel: '#FFF',
            transparentPanel: 'hsl(0 0% 0% / 97%)',
            shadowLight: 'hsl(206 22% 7% / 35%)',
            shadowDark: 'hsl(206 22% 7% / 20%)',
        },
        fonts: {
            untitled: 'Untitled Sans, -apple-system, system-ui, sans-serif',
            inter: '"Inter", sans-serif',
            mono: 'SÃ¶hne Mono, menlo, monospace',
            pragmatica: '"Pragmatica Extended", sans-serif',
        },
        space: {
            1: '5px',
            2: '10px',
            3: '15px',
            4: '20px',
            5: '25px',
            6: '35px',
            7: '45px',
            8: '65px',
            9: '80px',
        },
        sizes: {
            1: '5px',
            2: '10px',
            3: '15px',
            4: '20px',
            5: '25px',
            6: '35px',
            7: '45px',
            8: '65px',
            9: '80px',
        },
        fontSizes: {
            1: '12px',
            2: '13px',
            3: '15px',
            4: '17px',
            5: '19px',
            6: '21px',
            7: '27px',
            8: '35px',
            9: '59px',
        },
        radii: {
            1: '4px',
            2: '6px',
            3: '8px',
            4: '12px',
            round: '50%',
            pill: '9999px',
        },
        zIndices: {
            1: '100',
            2: '200',
            3: '300',
            4: '400',
            max: '999',
        },
    },
    media: {
        xs: '(max-width: 480px)',
        sm: '(max-width: 520px)',
        md: '(max-width: 740px)',
        lg: '(max-width: 1920px)',
        xl: '(min-width: 1921px)',

        bp1: '(min-width: 520px)',
        bp2: '(min-width: 900px)',
        bp3: '(min-width: 1200px)',
        bp4: '(min-width: 1800px)',
        motion: '(prefers-reduced-motion)',
        hover: '(any-hover: hover)',
        dark: '(prefers-color-scheme: dark)',
        light: '(prefers-color-scheme: light)',
    },
    utils: {
        /*
        fontSize: (size: number) => {
          // https://rsms.me/inter/dynmetrics/
          const a = -0.0223;
          const b = 0.185;
          const c = -0.17450;
          const tracking = a + b * Math.E ** (c * size);

          return {
            fontSize: size,
            letterSpacing: `${tracking}em*`,
          };
        },
         */
        p: (value: Stitches.PropertyValue<'padding'>) => ({
            padding: value,
        }),
        pt: (value: Stitches.PropertyValue<'paddingTop'>) => ({
            paddingTop: value,
        }),
        pr: (value: Stitches.PropertyValue<'paddingRight'>) => ({
            paddingRight: value,
        }),
        pb: (value: Stitches.PropertyValue<'paddingBottom'>) => ({
            paddingBottom: value,
        }),
        pl: (value: Stitches.PropertyValue<'paddingLeft'>) => ({
            paddingLeft: value,
        }),
        px: (value: Stitches.PropertyValue<'paddingLeft'>) => ({
            paddingLeft: value,
            paddingRight: value,
        }),
        py: (value: Stitches.PropertyValue<'paddingTop'>) => ({
            paddingTop: value,
            paddingBottom: value,
        }),

        m: (value: Stitches.PropertyValue<'margin'>) => ({
            margin: value,
        }),
        mt: (value: Stitches.PropertyValue<'marginTop'>) => ({
            marginTop: value,
        }),
        mr: (value: Stitches.PropertyValue<'marginRight'>) => ({
            marginRight: value,
        }),
        mb: (value: Stitches.PropertyValue<'marginBottom'>) => ({
            marginBottom: value,
        }),
        ml: (value: Stitches.PropertyValue<'marginLeft'>) => ({
            marginLeft: value,
        }),
        mx: (value: Stitches.PropertyValue<'marginLeft'>) => ({
            marginLeft: value,
            marginRight: value,
        }),
        my: (value: Stitches.PropertyValue<'marginTop'>) => ({
            marginTop: value,
            marginBottom: value,
        }),

        ta: (value: Stitches.PropertyValue<'textAlign'>) => ({ textAlign: value }),

        fd: (value: Stitches.PropertyValue<'flexDirection'>) => ({ flexDirection: value }),
        fw: (value: Stitches.PropertyValue<'flexWrap'>) => ({ flexWrap: value }),

        ai: (value: Stitches.PropertyValue<'alignItems'>) => ({ alignItems: value }),
        ac: (value: Stitches.PropertyValue<'alignContent'>) => ({ alignContent: value }),
        jc: (value: Stitches.PropertyValue<'justifyContent'>) => ({ justifyContent: value }),
        as: (value: Stitches.PropertyValue<'alignSelf'>) => ({ alignSelf: value }),
        fg: (value: Stitches.PropertyValue<'flexGrow'>) => ({ flexGrow: value }),
        fs: (value: Stitches.PropertyValue<'flexShrink'>) => ({ flexShrink: value }),
        fb: (value: Stitches.PropertyValue<'flexBasis'>) => ({ flexBasis: value }),

        bc: (value: Stitches.PropertyValue<'backgroundColor'>) => ({
            backgroundColor: value,
        }),

        br: (value: Stitches.PropertyValue<'borderRadius'>) => ({
            borderRadius: value,
        }),
        btrr: (value: Stitches.PropertyValue<'borderTopRightRadius'>) => ({
            borderTopRightRadius: value,
        }),
        bbrr: (value: Stitches.PropertyValue<'borderBottomRightRadius'>) => ({
            borderBottomRightRadius: value,
        }),
        bblr: (value: Stitches.PropertyValue<'borderBottomLeftRadius'>) => ({
            borderBottomLeftRadius: value,
        }),
        btlr: (value: Stitches.PropertyValue<'borderTopLeftRadius'>) => ({
            borderTopLeftRadius: value,
        }),

        bs: (value: Stitches.PropertyValue<'boxShadow'>) => ({ boxShadow: value }),

        lh: (value: Stitches.PropertyValue<'lineHeight'>) => ({ lineHeight: value }),

        ox: (value: Stitches.PropertyValue<'overflowX'>) => ({ overflowX: value }),
        oy: (value: Stitches.PropertyValue<'overflowY'>) => ({ overflowY: value }),

        pe: (value: Stitches.PropertyValue<'pointerEvents'>) => ({ pointerEvents: value }),
        us: (value: Stitches.PropertyValue<'userSelect'>) => ({
            WebkitUserSelect: value,
            userSelect: value,
        }),

        userSelect: (value: Stitches.PropertyValue<'userSelect'>) => ({
            WebkitUserSelect: value,
            userSelect: value,
        }),
        appearance: (value: Stitches.PropertyValue<'appearance'>) => ({
            WebkitAppearance: value,
            appearance: value,
        }),
        backgroundClip: (value: Stitches.PropertyValue<'backgroundClip'>) => ({
            WebkitBackgroundClip: value,
            backgroundClip: value,
        }),
    },
});

export type CSS = Stitches.CSS<typeof config>;

export const darkTheme = createTheme('dark-theme', {
    colors: {
        ...grayDark,
        ...mauveDark,
        ...slateDark,
        ...sageDark,
        ...oliveDark,
        ...sandDark,
        ...tomatoDark,
        ...redDark,
        ...crimsonDark,
        ...pinkDark,
        ...plumDark,
        ...purpleDark,
        ...violetDark,
        ...indigoDark,
        ...blueDark,
        ...skyDark,
        ...mintDark,
        ...cyanDark,
        ...tealDark,
        ...greenDark,
        ...grassDark,
        ...limeDark,
        ...yellowDark,
        ...amberDark,
        ...orangeDark,
        ...brownDark,
        ...bronzeDark,
        ...goldDark,

        ...grayDarkA,
        ...mauveDarkA,
        ...slateDarkA,
        ...sageDarkA,
        ...oliveDarkA,
        ...sandDarkA,
        ...tomatoDarkA,
        ...redDarkA,
        ...crimsonDarkA,
        ...pinkDarkA,
        ...plumDarkA,
        ...purpleDarkA,
        ...violetDarkA,
        ...indigoDarkA,
        ...blueDarkA,
        ...skyDarkA,
        ...mintDarkA,
        ...cyanDarkA,
        ...tealDarkA,
        ...greenDarkA,
        ...grassDarkA,
        ...limeDarkA,
        ...yellowDarkA,
        ...amberDarkA,
        ...orangeDarkA,
        ...brownDarkA,
        ...bronzeDarkA,
        ...goldDarkA,

        light100: 'rgba(0, 0, 0, 0.4)',
        light50: 'rgba(0, 0, 0, 0.8)',

        blur: 'rgba(0, 0, 0, 0.8)',

        atelier00: '#837E95',
        atelier01: '#A493F8',
        atelier02: '#BEBCA6',
        atelier03: '#CEFE71',

        suprLime1: 'hsl(109, 85%, 97%)',
        suprLime2: 'hsl(108, 90%, 88%)',
        suprLime3: 'hsl(110, 91%, 83%)',
        suprLime4: 'hsl(111, 91%, 78%)',
        suprLime5: 'hsl(113, 91%, 73%)',
        suprLime6: 'hsla(114, 91%, 68%, 0.8)',
        suprLime7: 'hsl(164, 79%, 6%)',

        // Semantic colors
        hiContrast: '$slate12',
        loContrast: '$slate1',
        canvas: 'hsl(0 0% 15%)',
        panel: '$slate3',
        transparentPanel: 'hsl(0 100% 100% / 97%)',
        shadowLight: 'hsl(206 22% 7% / 35%)',
        shadowDark: 'hsl(206 22% 7% / 20%)',
    },
});
